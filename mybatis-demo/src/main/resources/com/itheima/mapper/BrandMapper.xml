<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.itheima.mapper.BrandMapper">

    <!--
       数据库表的字段名称  和  实体类的属性名称 不一样，则不能自动封装数据
           * 起别名：对不一样的列名起别名，让别名和实体类的属性名一样
               * 缺点：每次查询都要定义一次别名
                   * sql片段
                       * 缺点：不灵活
           * resultMap：
               1. 定义<resultMap>标签
               2. 在<select>标签中，使用resultMap属性替换 resultType属性

   -->

    <!--<select id="selectAll" resultType="com.itheima.pojo.Brand1">
        select * from tb_brand;
    </select>-->


    <!--<sql id="brand_colum">
        id, brand_name brandName, company_name companyName, ordered,description,status
    </sql>
    <select id="selectAll" resultType="com.itheima.pojo.Brand1">
        select
            <include refid="brand_colum"/>
        from tb_brand;
    </select>-->


    <resultMap id="brandResultMap" type="com.itheima.pojo.Brand1">
        <!--
           id：完成主键字段的映射
               column：表的列名
               property：实体类的属性名
           result：完成一般字段的映射
               column：表的列名
               property：实体类的属性名
       -->
        <result column="brand_name" property="brandName"></result>
        <result column="company_name" property="companyName"></result>
    </resultMap>
    <select id="selectAll" resultMap="brandResultMap">
        select
        *
        from tb_brand;
    </select>

    <!--
            * 参数占位符：
                1. #{}:会将其替换为 ?，为了防止SQL注入
                2. ${}：拼sql。会存在SQL注入问题
                3. 使用时机：
                    * 参数传递的时候：#{}
                    * 表名或者列名不固定的情况下：${} 会存在SQL注入问题

             * 参数类型：parameterType：可以省略
             * 特殊字符处理：
                1. 转义字符：
                2. CDATA区:
    -->
    <!--<select id="selectById" resultMap="brandResultMap">
        select *
        from tb_brand where id = #{id};
    </select>-->

    <select id="selectById" resultMap="brandResultMap">
        select *
        from tb_brand where id
        <![CDATA[
            =
        ]]> #{id};
    </select>


    <!--条件查询-->
    <!--<select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        where status = #{status} and company_name like #{companyName} and brand_name like #{brandName}
    </select>-->


    <!--
        动态条件查询
            * if: 条件判断
                * test：逻辑表达式
            * 问题：
                * 恒等式
                * <where> 替换 where 关键字
    -->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        <!--where 1 = 1-->
        <where>
            <if test="status != null">
                and status = #{status}
            </if>
            <if test="companyName != null and companyName != '' ">
                and company_name like #{companyName}
            </if>
            <if test="brandName != null and brandName != '' ">
                and brand_name like #{brandName}
            </if>
        </where>
    </select>


    <select id="selectByConditionSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <choose><!--相当于switch-->
                <when test="status != null"><!--相当于case-->
                    status = #{status}
                </when>
                <when test="companyName != null and companyName != '' "><!--相当于case-->
                    company_name like #{companyName}
                </when>
                <when test="brandName != null and brandName != ''"><!--相当于case-->
                    brand_name like #{brandName}
                </when>
            </choose>
        </where>
    </select>


</mapper>